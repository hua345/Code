package com.github.chenjianhua.controller;

/**
 * @author Fang
 *
 */
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.chenjianhua.entity.User;
import com.github.chenjianhua.repository.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
@EnableAutoConfiguration
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam Integer age) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		/*
		 * @RequestMapping("/add")
		 * RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。
		 */
		/*
		 * @ResponseBody i) 该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，
		 * 然后把相应的数据绑定到要返回的对象上；
		 * 
		 * ii) 再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上。
		 */
		User n = new User();
		n.setName(name);
		n.setAge(age);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/queryUserByName") // Map ONLY GET Requests
	public @ResponseBody User queryUserByName(@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		return userRepository.findUserByName(name);
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
